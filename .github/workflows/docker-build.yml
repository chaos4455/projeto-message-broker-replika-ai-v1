name: üöÄ Build, Push e Teste do Docker - Replika AI

on:
  push:
    branches: [main]

env:
  IMAGE_NAME: chaos4455/message-broker-replika
  VERSION_PREFIX: RC1-beta-v

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: üì• Clona o reposit√≥rio
      uses: actions/checkout@v3

    - name: üß† Gera n√∫mero da vers√£o
      id: versioning
      run: |
        TAGS=$(git ls-remote --tags origin | grep "${VERSION_PREFIX}" | awk -F'/' '{print $3}' | sort -V)
        LAST_TAG=$(echo "$TAGS" | tail -n 1)
        if [[ "$LAST_TAG" =~ ${VERSION_PREFIX}([0-9]+) ]]; then
          NUMBER=$(printf "%04d" $((10#${BASH_REMATCH[1]} + 1)))
        else
          NUMBER="0001"
        fi
        NEW_TAG="${VERSION_PREFIX}${NUMBER}"
        echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT

    - name: üîê Login no DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: üìù Gera Dockerfile dinamicamente
      run: |
        cat <<EOF > Dockerfile
        FROM ubuntu:22.04

        # Otimiza√ß√µes de imagem
        ENV DEBIAN_FRONTEND=noninteractive

        RUN apt-get update && apt-get upgrade -y && apt-get install -y \\
            python3 python3-pip gcc libpq-dev build-essential \\
            openssh-server sudo ufw nano vim htop iftop net-tools curl wget unzip iputils-ping \\
            libpam0g-dev libpam-modules && \\
            apt-get clean && rm -rf /var/lib/apt/lists/*

        # Usu√°rio admin
        RUN useradd -m -s /bin/bash admin && echo 'admin:admin' | chpasswd && echo 'admin ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

        # SSH
        RUN mkdir /var/run/sshd
        RUN sed -i 's/^#\\?PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config && \\
            sed -i 's/^#\\?PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config && \\
            sed -i 's/^#\\?UsePAM.*/UsePAM yes/' /etc/ssh/sshd_config && \\
            sed -i 's/^#\\?PermitEmptyPasswords.*/PermitEmptyPasswords no/' /etc/ssh/sshd_config

        WORKDIR /app
        COPY requirements.txt .
        COPY message-broker-v3-clean.py .
        COPY webdash3-clean.py .
        COPY geramensagem-v3-massive-loop.py .
        COPY coleta-mensagem-v3-batch-lote.py .

        RUN pip3 install --no-cache-dir -r requirements.txt

        EXPOSE 22 8000 8080 8333 8777

        CMD service ssh start && \\
            python3 message-broker-v3-clean.py & \\
            sleep 5 && python3 webdash3-clean.py & \\
            sleep 5 && python3 geramensagem-v3-massive-loop.py & \\
            sleep 5 && python3 coleta-mensagem-v3-batch-lote.py && \\
            tail -f /dev/null
        EOF

    - name: üõ†Ô∏è Build da imagem Docker
      run: docker build -t $IMAGE_NAME:${{ steps.versioning.outputs.tag }} .

    - name: ‚òÅÔ∏è Push para o DockerHub
      run: docker push $IMAGE_NAME:${{ steps.versioning.outputs.tag }}

    - name: üè∑Ô∏è Cria e envia nova tag Git
      env:
        GH_TOKEN: ${{ secrets.MASTERTOKEN }}
      run: |
        git config user.name "Elias Andrade - Replika AI"
        git config user.email "chaos4455@users.noreply.github.com"
        git tag ${{ steps.versioning.outputs.tag }}
        git push https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }} --tags

  test-run:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: üê≥ Instala o Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y docker.io

    - name: üîç Testa imagem e exp√µe porta 8777
      run: |
        docker pull ${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.tag }}
        docker run -d -p 8777:8777 --name test_container ${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.tag }}
        sleep 10
        if curl -s http://localhost:8777; then
          echo "‚úÖ Porta 8777 respondendo"
        else
          echo "‚ùå Falha ao acessar porta 8777"
          exit 1
        fi
