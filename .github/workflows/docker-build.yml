name: üöÄ Build & Release - Replika AI Message Broker

on:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: chaos4455/message-broker-replika
  VERSION_PREFIX: RC1-beta-v

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}

    steps:
    - name: üßæ Checkout do Reposit√≥rio
      uses: actions/checkout@v4

    - name: üî¢ Gerar vers√£o de release automaticamente
      id: tag_version
      run: |
        last_tag=$(git tag --sort=-v:refname | grep "${VERSION_PREFIX}" | head -n 1)
        if [ -z "$last_tag" ]; then
          next_tag="${VERSION_PREFIX}0001"
        else
          base_num=$(echo $last_tag | grep -o '[0-9]*$')
          next_num=$(printf "%04d" $((10#$base_num + 1)))
          next_tag="${VERSION_PREFIX}${next_num}"
        fi
        echo "üëâ Nova tag: $next_tag"
        echo "new_tag=$next_tag" >> "$GITHUB_OUTPUT"

    - name: üê≥ Login no DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: üì¶ Build da imagem Docker com Dockerfile gerado dinamicamente
      run: |
        cat << 'EOF' > Dockerfile
        FROM ubuntu:22.04

        ENV DEBIAN_FRONTEND=noninteractive

        RUN apt-get update && apt-get upgrade -y && \
            apt-get install -y python3 python3-pip gcc libpq-dev build-essential \
            openssh-server sudo ufw nano vim htop iftop net-tools curl wget unzip iputils-ping \
            libpam0g-dev libpam-modules && apt-get clean && rm -rf /var/lib/apt/lists/*

        RUN useradd -m -s /bin/bash admin && echo 'admin:admin' | chpasswd && \
            echo 'admin ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && mkdir /var/run/sshd

        RUN sed -i 's/^#\?PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config && \
            sed -i 's/^#\?PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config && \
            sed -i 's/^#\?UsePAM.*/UsePAM yes/' /etc/ssh/sshd_config && \
            sed -i 's/^#\?PermitEmptyPasswords.*/PermitEmptyPasswords no/' /etc/ssh/sshd_config

        WORKDIR /app

        COPY requirements.txt .
        COPY message-broker-v3-clean.py .
        COPY webdash3-clean.py .
        COPY geramensagem-v3-massive-loop.py .
        COPY coleta-mensagem-v3-batch-lote.py .

        RUN pip3 install --no-cache-dir -r requirements.txt

        EXPOSE 22 8000 8080 8333 8777

        CMD service ssh start && \
            python3 message-broker-v3-clean.py & \
            sleep 5 && \
            python3 webdash3-clean.py & \
            sleep 5 && \
            python3 geramensagem-v3-massive-loop.py & \
            sleep 5 && \
            python3 coleta-mensagem-v3-batch-lote.py && \
            tail -f /dev/null
        EOF

        docker build -t $IMAGE_NAME:${{ steps.tag_version.outputs.new_tag }} .

    - name: üì§ Push da imagem para DockerHub
      run: |
        docker tag $IMAGE_NAME:${{ steps.tag_version.outputs.new_tag }} $IMAGE_NAME:latest
        docker push $IMAGE_NAME:${{ steps.tag_version.outputs.new_tag }}
        docker push $IMAGE_NAME:latest

    - name: üè∑Ô∏è Criar e pushar tag de release
      env:
        GH_TOKEN: ${{ secrets.MASTERTOKEN }}
      run: |
        git config user.name "Elias Andrade - Replika AI"
        git config user.email "chaos4455@users.noreply.github.com"
        git tag ${{ steps.tag_version.outputs.new_tag }}
        git remote set-url origin https://chaos4455:${GH_TOKEN}@github.com/${{ github.repository }}
        git push origin ${{ steps.tag_version.outputs.new_tag }}

  test-pipeline:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: üê≥ Instalar Docker
      run: |
        sudo apt-get update && sudo apt-get install -y docker.io
        sudo systemctl start docker

    - name: üß™ Testar a imagem e verificar porta 8777
      run: |
        docker pull $IMAGE_NAME:${{ needs.build-and-push.outputs.new_tag }}
        docker run -d --name test-container -p 8777:8777 $IMAGE_NAME:${{ needs.build-and-push.outputs.new_tag }}
        sleep 10
        if ss -tuln | grep :8777; then
          echo "‚úÖ Porta 8777 est√° ativa!"
        else
          echo "‚ùå Porta 8777 n√£o est√° respondendo!"
          exit 1
        fi
