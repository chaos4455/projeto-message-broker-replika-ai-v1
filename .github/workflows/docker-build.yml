# üì¶ GitHub Action: Build and Push Docker Image with Supervisor Runtime + Streamlit Control Center

```yaml
name: üöÄ Build and Push Docker Image with Supervisor Runtime

on:
  push:
    branches:
      - main

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: chaos4455/message-broker-replika
      VERSION: latest
      DOCKERHUB_USERNAME: chaos4455

    steps:
      - name: üß± Checkout Repository
        uses: actions/checkout@v3

      - name: üìã Create Dockerfile dynamically
        run: |
          cat <<'EOF' > Dockerfile
          FROM ubuntu:22.04
          ENV DEBIAN_FRONTEND=noninteractive

          RUN apt-get update && \
              apt-get upgrade -y && \
              apt-get install -y python3 python3-pip curl git net-tools iputils-ping nano openssh-server supervisor netcat \
              && pip3 install --no-cache-dir -r /tmp/requirements.txt

          RUN useradd -m -s /bin/bash replika && \
              echo 'replika:replika' | chpasswd && \
              mkdir -p /home/replika/app /var/log/supervisor

          WORKDIR /home/replika/app
          COPY . .

          COPY requirements.txt /tmp/requirements.txt
          COPY supervisord.conf /etc/supervisor/supervisord.conf

          EXPOSE 8333 8777 8555

          CMD ["/usr/bin/supervisord", "-n", "-c", "/etc/supervisor/supervisord.conf"]
          EOF

      - name: üîß Create supervisord.conf dynamically
        run: |
          cat <<'EOF' > supervisord.conf
          [supervisord]
          nodaemon=true
          logfile=/var/log/supervisor/supervisord.log
          pidfile=/tmp/supervisord.pid

          [program:broker]
          command=python3 /home/replika/app/message-broker-v3-clean.py
          directory=/home/replika/app
          autostart=true
          autorestart=true
          startsecs=3
          stderr_logfile=/var/log/supervisor/broker.err.log
          stdout_logfile=/var/log/supervisor/broker.out.log

          [program:webdash]
          command=python3 /home/replika/app/webdashv2-clean.py
          directory=/home/replika/app
          autostart=true
          autorestart=true
          startsecs=3
          stderr_logfile=/var/log/supervisor/webdash.err.log
          stdout_logfile=/var/log/supervisor/webdash.out.log

          [program:streamlit-center]
          command=streamlit run /home/replika/app/streamlit-control-center-v1.py --server.port=8555 --server.enableCORS=false
          directory=/home/replika/app
          autostart=true
          autorestart=true
          startsecs=5
          stderr_logfile=/var/log/supervisor/streamlit.err.log
          stdout_logfile=/var/log/supervisor/streamlit.out.log
          EOF

      - name: üê≥ Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üõ†Ô∏è Build Docker Image
        run: |
          docker build -t $IMAGE_NAME:$VERSION .

      - name: üìÑ Push Docker Image
        run: |
          docker push $IMAGE_NAME:$VERSION

      - name: üöÄ Deploy & Test Ports
        run: |
          docker run -d --name replika_test_container -p 8333:8333 -p 8777:8777 -p 8555:8555 $IMAGE_NAME:$VERSION
          echo '‚è≥ Aguardando 20s para inicializa√ß√£o dos servi√ßos...'
          sleep 20
          echo 'üîç Testando se as portas est√£o respondendo...'
          nc -zv localhost 8333 || echo '‚ö†Ô∏è Porta 8333 n√£o est√° respondendo.'
          nc -zv localhost 8777 || echo '‚ö†Ô∏è Porta 8777 n√£o est√° respondendo.'
          nc -zv localhost 8555 || echo '‚ö†Ô∏è Porta 8555 (Streamlit) n√£o est√° respondendo.'

          echo 'üìú √öltimos logs do supervisor:'
          docker exec replika_test_container tail -n 50 /var/log/supervisor/supervisord.log || echo '‚ö†Ô∏è N√£o foi poss√≠vel obter logs.'
          echo 'üìú Logs do Streamlit:'
          docker exec replika_test_container tail -n 50 /var/log/supervisor/streamlit.out.log || echo '‚ö†Ô∏è Sem logs.'

      # - name: üè∑Ô∏è Optional: Create and push tag
      #   run: |
      #     git config --global user.name "Elias Andrade - Replika AI"
      #     git config --global user.email "chaos4455@users.noreply.github.com"
      #     git tag RC1-beta-v0001
      #     git push origin --tags
```

---

### üì¶ `requirements.txt` (completo, sem vers√µes):

```txt
fastapi
uvicorn
python-multipart
python-jose[cryptography]
passlib[bcrypt]
aioredis
tortoise-orm
aerich
python-dotenv
pydantic
pydantic-settings
loguru
requests
colorama
cryptography
Werkzeug
psutil
schedule
flask
flask-cors
slowapi
strawberry-graphql[fastapi]
Jinja2
ipaddress
paramiko
streamlit
```

Se quiser, posso gerar tamb√©m um `Dockerfile` est√°tico com base nesse conte√∫do din√¢mico, para controle de vers√£o. Deseja isso tamb√©m, Elias?
