name: üê≥ Build, Tag & Push Docker - Replika AI

on:
  push:
    branches: [ main ]

jobs:
  build-tag-push:
    runs-on: ubuntu-latest
    name: üîñ Build com Auto Versionamento

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # necess√°rio para buscar todas as tags

      - name: üè∑Ô∏è Gerar nova vers√£o baseada em tag RC1-beta-vXXXX
        id: version
        run: |
          latest_tag=$(git tag -l 'RC1-beta-v*' | sort -V | tail -n 1)
          echo "√öltima tag encontrada: $latest_tag"

          if [[ -z "$latest_tag" ]]; then
            new_tag="RC1-beta-v0001"
          else
            number=$(echo $latest_tag | grep -oE '[0-9]+$')
            new_number=$(printf "%04d" $((10#$number + 1)))
            new_tag="RC1-beta-v${new_number}"
          fi

          echo "Nova vers√£o: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: üè∑Ô∏è Criar e pushar nova tag
        run: |
          git config --global user.name "Elias Andrade - Replika AI"
          git config --global user.email "chaos4455@users.noreply.github.com"
          git tag ${{ steps.version.outputs.new_tag }}
          git push origin ${{ steps.version.outputs.new_tag }}

      - name: üõ†Ô∏è Gerar Dockerfile din√¢mico otimizado
        run: |
          cat <<EOF > Dockerfile
          FROM ubuntu:22.04
          ENV DEBIAN_FRONTEND=noninteractive
          ENV TZ=Etc/UTC

          RUN apt-get update && apt-get upgrade -y && \
              apt-get install -y --no-install-recommends \
              python3 python3-pip gcc build-essential libpq-dev \
              openssh-server sudo ufw nano vim htop iftop net-tools curl wget unzip \
              iputils-ping libpam0g-dev libpam-modules ca-certificates tzdata && \
              apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/*

          RUN useradd -m -s /bin/bash admin && echo 'admin:admin' | chpasswd && \
              echo 'admin ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && mkdir /var/run/sshd

          RUN sed -i 's/^#\\?PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config && \
              sed -i 's/^#\\?PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config && \
              sed -i 's/^#\\?UsePAM.*/UsePAM yes/' /etc/ssh/sshd_config && \
              sed -i 's/^#\\?PermitEmptyPasswords.*/PermitEmptyPasswords no/' /etc/ssh/sshd_config

          EXPOSE 22 8000 8080 8333 8777
          WORKDIR /app
          COPY . /app
          RUN pip3 install --no-cache-dir -r requirements.txt || true

          CMD service ssh start && \
              python3 message-broker-v3-clean.py & \
              sleep 5 && \
              python3 webdash3-clean.py & \
              sleep 5 && \
              python3 geramensagem-v3-massive-loop.py & \
              sleep 5 && \
              python3 coleta-mensagem-v3-batch-lote.py && \
              tail -f /dev/null
          EOF

      - name: üîê Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: chaos4455
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üß± Build da imagem com tags
        run: |
          docker build -t chaos4455/message-broker-v3:latest -t chaos4455/message-broker-v3:${{ steps.version.outputs.new_tag }} .

      - name: ‚òÅÔ∏è Push imagem para Docker Hub
        run: |
          docker push chaos4455/message-broker-v3:latest
          docker push chaos4455/message-broker-v3:${{ steps.version.outputs.new_tag }}
