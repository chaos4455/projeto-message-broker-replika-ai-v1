name: 🔨 Build and Verify Docker Streamlit + SSH + Services App

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      DOCKER_IMAGE_NAME: chaos4455/vectorial-profiler:latest
      DOCKER_CONTAINER_NAME: vectorial-profiler
      EXTERNAL_SSH_PORT: 8222

    steps:
      - name: 📥 Clonando Repositório
        uses: actions/checkout@v3

      - name: 🔄 Garantindo Pull de Últimos Dados
        run: |
          git pull origin main || echo "⚠️ Aviso: Falha ao executar git pull, talvez não seja necessário."

      - name: 📁 Preparando diretório temporário para build
        run: |
          echo "📁 Limpando diretório de build..."
          rm -rf dockerbuild
          mkdir -p dockerbuild/app
          cp -r !(dockerbuild|.git|.github) dockerbuild/app || true

      - name: 📜 Validando existência de arquivos importantes
        run: |
          ls -lah dockerbuild/app
          if [ ! -f dockerbuild/app/requirements.txt ]; then
            echo "❌ Arquivo requirements.txt ausente!"
            exit 1
          fi

      - name: 📝 Gerando Dockerfile Dinamicamente
        run: |
          cat <<EOF > dockerbuild/Dockerfile
          FROM ubuntu:22.04

          RUN apt-get update && apt-get upgrade -y && \
              apt-get install -y python3 python3-pip curl git net-tools iputils-ping nano openssh-server supervisor && \
              pip3 install --no-cache-dir -r /home/replika/app/requirements.txt

          # Configuração de usuário admin
          RUN useradd -m -s /bin/bash admin && \
              echo "admin:admin" | chpasswd && \
              echo "PermitRootLogin yes" >> /etc/ssh/sshd_config && \
              echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config && \
              mkdir -p /var/run/sshd

          # Copiando configuração do Supervisor
          COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

          WORKDIR /home/replika/app
          CMD ["/usr/bin/supervisord"]
          EOF

      - name: ⚙️ Gerando supervisord.conf Dinamicamente
        run: |
          cat <<EOF > dockerbuild/supervisord.conf
          [supervisord]
          nodaemon=true

          [program:sshd]
          command=/usr/sbin/sshd -D
          autostart=true
          autorestart=true
          stdout_logfile=/var/log/supervisor/sshd.log
          stderr_logfile=/var/log/supervisor/sshd.err.log

          [program:streamlit-dashboard]
          command=python3 /home/replika/app/streamlit-control-center-v1.py
          directory=/home/replika/app
          autostart=true
          autorestart=true
          stdout_logfile=/var/log/supervisor/streamlit.log
          stderr_logfile=/var/log/supervisor/streamlit.err.log
          EOF

      - name: 🔐 Login no Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u chaos4455 --password-stdin

      - name: 🛠️ Build da Imagem Docker
        run: |
          docker build -t $DOCKER_IMAGE_NAME -f dockerbuild/Dockerfile dockerbuild

      - name: 🚀 Subindo Container
        run: |
          docker rm -f $DOCKER_CONTAINER_NAME || true
          docker run -d --name $DOCKER_CONTAINER_NAME \
            -p 8555:8555 \
            -p 8881:8881 \
            -p 8777:8777 \
            -p 8333:8333 \
            -p $EXTERNAL_SSH_PORT:22 \
            $DOCKER_IMAGE_NAME
          sleep 20

      - name: 🧠 Verificar serviços via Supervisor
        run: |
          echo "🔍 Status do Supervisor:"
          docker exec $DOCKER_CONTAINER_NAME supervisorctl status || echo "❌ Falha ao coletar status do supervisor."

      - name: 🔎 Verificar se Streamlit subiu (porta 8555)
        run: |
          for i in {1..6}; do
            echo "⏳ Tentativa $i: Verificando Streamlit em http://localhost:8555"
            sleep 10
            if curl -s http://localhost:8555 | grep -iq "streamlit"; then
              echo "✅ Streamlit ativo na porta 8555"
              break
            elif [ "$i" -eq 6 ]; then
              echo "❌ Streamlit não respondeu corretamente na porta 8555"
              docker logs $DOCKER_CONTAINER_NAME
              exit 1
            fi
          done

      - name: 📡 Testar portas adicionais
        run: |
          declare -A portas=(
            ["Dashboard (8881)"]=8881
            ["Broker Master API (8777)"]=8777
            ["Dash Monitor (8333)"]=8333
          )
          for nome in "${!portas[@]}"; do
            porta=${portas[$nome]}
            echo "🔎 Testando $nome - Porta $porta..."
            nc -zv 127.0.0.1 $porta && echo "✅ $nome OK!" || echo "❌ Falha ao acessar $nome"
          done

      - name: 🔐 Testar SSH (porta 8222)
        run: |
          echo "⏳ Aguardando o SSH ficar pronto..."
          sleep 10
          sshpass -p 'admin' ssh -o StrictHostKeyChecking=no -p $EXTERNAL_SSH_PORT admin@localhost 'echo "✅ Login SSH bem-sucedido!"' || echo "❌ Falha no login SSH!"

      - name: 🪵 Coletar Logs do Supervisor
        run: |
          echo "📑 Logs do Supervisor:"
          docker exec $DOCKER_CONTAINER_NAME cat /var/log/supervisor/supervisord.log || echo "⚠️ Falha ao obter logs."

      - name: 📦 Listar Processos Ativos
        run: |
          echo "📋 Processos ativos:"
          docker exec $DOCKER_CONTAINER_NAME ps aux

      - name: 🧼 Cleanup (opcional)
        if: always()
        run: docker rm -f $DOCKER_CONTAINER_NAME || true
