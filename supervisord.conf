# ==============================================================================
# Supervisord Configuration File (Improved)
# ==============================================================================
# Place this file in the root of your project, alongside the Dockerfile.
# It will be copied into the Docker image during the build process.
#
# Note: Ensure the log directory (/var/log/supervisor) is created
#       in your Dockerfile before supervisord starts.
#       Example Dockerfile command: RUN mkdir -p /var/log/supervisor
#
# Best Practice: Run supervisord with an absolute path to this config file
#                in your Dockerfile's CMD or ENTRYPOINT to avoid warnings
#                when running as root. Example: CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]
# ==============================================================================

[supervisord]
nodaemon=true                   ; Run Supervisor in the foreground (essential for Docker containers)
logfile=/var/log/supervisor/supervisord.log ; Main log file for supervisord itself
pidfile=/var/run/supervisord.pid ; PID file location
loglevel=info                   ; Logging level (debug, info, warn, error, critical)
# user=some_non_root_user       ; Consider running supervisord as non-root if possible, requires adjusting permissions

[unix_http_server]
file=/var/run/supervisor.sock   ; Path to the supervisor socket file (for supervisorctl)
chmod=0700                 ; Set permissions for the socket file (restrict access)
# username=user                 ; Optional: Add basic auth for supervisorctl
# password=pass

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface ; Enable the XML-RPC interface

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock ; How supervisorctl connects to supervisord
# username=user                 ; Optional: Credentials if basic auth is enabled above
# password=pass

# ==============================================================================
# Program Definitions
# ==============================================================================
# Define the processes managed by Supervisor.
# - 'priority' controls the startup order (lower numbers start first).
# - 'sleep' commands introduce delays *before* starting subsequent processes,
#   allowing time for initialization or resource availability.
# - 'autorestart' determines if Supervisor should restart the process if it exits.
# - 'startsecs' is the time a process needs to be running before Supervisor
#   considers it successfully started.
# ==============================================================================

[program:sshd]
command=/usr/sbin/sshd -D       ; Run SSH daemon in the foreground, no detach
priority=10                     ; Start first
autostart=true
autorestart=true
startsecs=5                     ; Consider started after 5 seconds
user=root                       ; SSHd usually needs root initially
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stderr_logfile=/var/log/supervisor/%(program_name)s.err.log ; Corrected format
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=3

# --- Initialization Sequence ---
# These programs run once to set up the environment or database.

[program:broker-init]
command=python3 message-broker-v3-clean.py ; Run the initial broker script
directory=/home/replika/app     ; Working directory
priority=100                    ; Starts after sshd
autostart=true
autorestart=false               ; Run only once at startup
startsecs=1                     ; Consider started quickly (it's a one-shot)
# Note: Removed the trailing '&& sleep 10'. Delays are handled by subsequent programs.
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stderr_logfile=/var/log/supervisor/%(program_name)s.err.log ; Corrected format
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=3

[program:dbfixv1]
# Waits 15 seconds *after broker-init starts* before running the first DB fix.
command=/bin/bash -c "sleep 15 && python3 dbfixv1.py"
directory=/home/replika/app
priority=200                    ; Starts after broker-init (respecting the sleep)
autostart=true
autorestart=false               ; Run only once
startsecs=1                     ; One-shot script
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stderr_logfile=/var/log/supervisor/%(program_name)s.err.log ; Corrected format
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=3

[program:dbfixv2]
# Waits 25 seconds *after dbfixv1 starts* before running the second DB fix.
command=/bin/bash -c "sleep 25 && python3 dbfixv2.py"
directory=/home/replika/app
priority=300                    ; Starts after dbfixv1 (respecting the sleep)
autostart=true
autorestart=false               ; Run only once
startsecs=1                     ; One-shot script
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stderr_logfile=/var/log/supervisor/%(program_name)s.err.log ; Corrected format
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=3

# --- Main Application Services ---
# These are the long-running components of the application.

[program:broker-final]
# Waits 35 seconds *after dbfixv2 starts* before running the main broker process.
# Assumes this is the continuously running version, perhaps after init/fixes.
command=/bin/bash -c "sleep 35 && python3 message-broker-v3-clean.py"
directory=/home/replika/app
priority=400                    ; Starts after dbfixv2 (respecting the sleep)
autostart=true
autorestart=true                ; Keep the main broker running
startsecs=10                    ; Allow time for the broker to stabilize
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stderr_logfile=/var/log/supervisor/%(program_name)s.err.log ; Corrected format
stdout_logfile_maxbytes=50MB    ; Larger logs for main components
stdout_logfile_backups=5

[program:webdash]
# Waits 55 seconds *after broker-final starts* before running the web dashboard.
command=/bin/bash -c "sleep 55 && python3 webdash3-clean.py"
directory=/home/replika/app
priority=500                    ; Starts after broker-final (respecting the sleep)
autostart=true
autorestart=true                ; Keep the web dashboard running
startsecs=10                    ; Allow time for web server to start
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stderr_logfile=/var/log/supervisor/%(program_name)s.err.log ; Corrected format
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=5

[program:gerador]
# Waits 65 seconds *after webdash starts* before running the message generator.
command=/bin/bash -c "sleep 65 && python3 geramensagem-v3-massive-loop.py"
directory=/home/replika/app
priority=600                    ; Starts after webdash (respecting the sleep)
autostart=true
autorestart=true                ; Keep the generator running
startsecs=5                     ; Generator likely starts faster
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stderr_logfile=/var/log/supervisor/%(program_name)s.err.log ; Corrected format
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=5

[program:coletor]
# Waits 75 seconds *after gerador starts* before running the message collector.
command=/bin/bash -c "sleep 75 && python3 coleta-mensagem-v3-batch-lote.py"
directory=/home/replika/app
priority=700                    ; Starts after gerador (respecting the sleep)
autostart=true
autorestart=true                ; Keep the collector running
startsecs=5                     ; Collector likely starts faster
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stderr_logfile=/var/log/supervisor/%(program_name)s.err.log ; Corrected format
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=5

# ==============================================================================
# End of Configuration
# ==============================================================================
